{"version":3,"sources":["pokeball.png","components/RootReducer.js","components/Navbar.js","components/Home.js","components/Contact.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initState","posts","userId","id","title","body","RootReducer","state","arguments","length","undefined","action","type","newPosts","filter","post","Object","objectSpread","withRouter","props","react_default","a","createElement","className","Link","to","Home","console","log","this","postList","map","key","src","PokeBall","Component","connect","Contact","Post","handleClick","_this","deletePost","match","params","post_id","history","push","preparePost","onClick","ownProps","find","dispatch","App","components_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","store","createStore","ReactDOM","render","BrowserRouter","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25d479cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.5d15f223.png\";","const initState = {\r\n\r\n\tposts: [\r\n\t\t\t {\r\n\t    \"userId\": 1,\r\n\t    \"id\": 1,\r\n\t    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\r\n\t    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\r\n\t  \t},\r\n\t  \t{\r\n\t    \"userId\": 1,\r\n\t    \"id\": 2,\r\n\t    \"title\": \"qui est esse\",\r\n\t    \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\r\n\t  \t},\r\n\t  \t{\r\n\t    \"userId\": 1,\r\n\t    \"id\": 3,\r\n\t    \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\r\n\t    \"body\": \"et iusto sed quo iure voluptatem occaecati omnis eligendi aut ad voluptatem doloribus vel accusantium quis pariatur molestiae porro eius odio et labore et velit aut\"\r\n\t  \t},\r\n\t]\r\n}\r\nconst RootReducer  = (state = initState, action) => {\r\n\tswitch(action.type){\r\n\t\tcase 'DELETE_POST':\r\n\t\t\tlet newPosts = state.posts.filter(post => {\r\n\t\t\t\treturn (action.id != post.id)\r\n\t\t\t});\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tposts: newPosts\r\n\t\t\t};\r\n\t\tdefault:\r\n\t}\r\n\treturn state;\r\n}\r\n\r\nexport default RootReducer;\t","import React, { Component } from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nconst Navbar = (props) => {\r\n    return (\r\n    <nav className=\"nav-wrapper red darken-3\"> \r\n\t\t<div className=\"container\">\r\n       \t\t<a className=\"brand-logo\"> Poke Times </a>\r\n      \t</div>\r\n      \t<ul className=\"right\">\r\n      \t\t<li> <Link to=\"/\"> Home </Link> </li>\r\n      \t\t<li> <Link to=\"/contact\"> Contact </Link> </li>\r\n      \t</ul>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport PokeBall from '../pokeball.png';\r\nimport { connect } from 'react-redux';\r\nimport './Home.css';\r\nclass Home extends Component {\r\n  render() {\r\n    console.log(this.props);\r\n  \tconst {posts} = this.props;\r\n  \tconst postList = posts.length ? \r\n  \t( \r\n  \t\tposts.map(post =>{\r\n  \t\treturn(\r\n  \t\t\t<div className = \"post card\" key={post.id}>\r\n  \t\t\t\t<img src={PokeBall}/>\r\n  \t\t\t\t<div className = \"card-content\">\r\n  \t\t\t\t<span className=\"card-title\"> \r\n  \t\t\t\t\t<Link to = {'/posts/' + post.id}> {post.title} </Link> \r\n  \t\t\t\t</span>\r\n  \t\t\t\t<p> {post.body} </p>\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t);\r\n  \t\t})\r\n  \t)\r\n  \t:\r\n  \t(\r\n  \t\t<div className=\"center\"> No Posts Yet </div>\r\n  \t);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n       \t<h1 className=\"center\"> Home </h1>\r\n       \t{postList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      posts: state.posts\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps) (Home);\r\n","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n  \t\r\n    return (\r\n      <div className=\"container\">\r\n       \t<h1 className=\"center\"> Contact Page </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nclass Post extends Component {\r\n\r\n  handleClick = () =>{\r\n   this.props.deletePost(this.props.match.params.post_id);\r\n   this.props.history.push('/')\r\n  }\r\n  render() {\r\n    console.log(this.props);\r\n    const post  = this.props.post;\r\n    const preparePost = post ? (\r\n        <div className=\"post\">\r\n          <h4 className=\"center\">{post.title}</h4>\r\n          <p> {post.body}</p>\r\n          <div className=\"center\">\r\n            <button className=\"button grey\" onClick = {this.handleClick}> Delete Post </button>\r\n          </div>\r\n        </div> \r\n        ) \r\n      :\r\n      (\r\n        <div className=\"center\">\r\n           Post Deleted\r\n        </div>\r\n      );\r\n  \t\t\r\n  \t\t\r\n    return (\r\n      <div className=\"center\">\r\n       \t<h1> {preparePost} </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return{\r\n    post: state.posts.find(post => {\r\n      return (post.id == ownProps.match.params.post_id);\r\n    })\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deletePost: (id) => {dispatch({type: 'DELETE_POST', id: id})}\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar.js';\nimport Home from './components/Home.js';\nimport Contact from './components/Contact.js';\nimport Post from './components/Post.js';\nimport {Route, Switch} from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n         <Navbar />\n         <Switch>\n            <Route exact path = '/' component={Home} />\n            <Route exact path = '/contact' component={Contact} />\n            <Route exact path = '/posts/:post_id' component={Post} />\n          </Switch>\n        </div>\n        \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport RootReducer from './components/RootReducer'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(RootReducer);\n\nReactDOM.render(( \n\t<div>\n\t\t<BrowserRouter>\n\t\t\t<Provider store={store} >\n\t\t \t\t<App /> \n\t\t \t</Provider>\n\t\t</BrowserRouter>\n\t</div>\n\t)\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}