{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/Contact.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","Link","to","home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","_this2","axios","get","then","res","setState","data","slice","postList","length","map","post","key","id","src","PokeBall","title","body","Component","Contact","Post","match","params","post_id","App","components_Navbar","Switch","Route","exact","path","component","Home","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e8a5be1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.5d15f223.png\";","import React, { Component } from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nconst Navbar = (props) => {\r\n    return (\r\n    <nav className=\"nav-wrapper red darken-3\"> \r\n\t\t<div className=\"container\">\r\n       \t\t<a className=\"brand-logo\"> Poke Times </a>\r\n      \t</div>\r\n      \t<ul className=\"right\">\r\n      \t\t<li> <Link to=\"/\"> Home </Link> </li>\r\n      \t\t<li> <Link to=\"/contact\"> Contact </Link> </li>\r\n      \t</ul>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport PokeBall from '../pokeball.png';\r\nimport './Home.css';\r\nclass home extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tposts: [],\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts')\r\n\t\t.then(res =>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tposts: res.data.slice(0,10)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n  render() {\r\n  \tconst {posts} = this.state;\r\n  \tconst postList = posts.length ? \r\n  \t( \r\n  \t\tposts.map(post =>{\r\n  \t\treturn(\r\n  \t\t\t<div className = \"post card\" key={post.id}>\r\n  \t\t\t\t<img src={PokeBall}/>\r\n  \t\t\t\t<div className = \"card-content\">\r\n  \t\t\t\t<span className=\"card-title\"> \r\n  \t\t\t\t\t<Link to = {'/posts/' + post.id}> {post.title} </Link> \r\n  \t\t\t\t</span>\r\n  \t\t\t\t<p> {post.body} </p>\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t);\r\n  \t\t})\r\n  \t)\r\n  \t:\r\n  \t(\r\n  \t\t<div className=\"center\"> No Posts Yet </div>\r\n  \t);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n       \t<h1 className=\"center\"> Home </h1>\r\n       \t{postList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default home;\r\n","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n  \t\r\n    return (\r\n      <div className=\"container\">\r\n       \t<h1 className=\"center\"> Contact Page </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nclass Post extends Component {\r\n\r\n\t\tstate = {\r\n\t\t\tposts: {},\r\n\t\t}\r\n\tcomponentDidMount(){\r\n\t\tlet id = this.props.match.params.post_id;\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts/' + id)\r\n\t\t.then(res => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tposts: res.data\r\n\t\t\t})\t\r\n\t\t});\r\n\t}\r\n  render() {\r\n  \tconst post = this.state.posts ? \r\n  \t\t(\r\n  \t\t\t<div className=\"post card\">\r\n  \t\t\t\t<h4 className=\"center\">{this.state.posts.title}</h4>\r\n  \t\t\t\t<p className=\"card-content\"> {this.state.posts.body}</p>\r\n  \t\t\t</div> \r\n  \t\t)\r\n  \t\t:\r\n  \t\t(\r\n  \t\t\t<div className=\"center\"> Loading Posts </div>\r\n  \t\t);\r\n    return (\r\n      <div className=\"container\">\r\n       \t<h1> {post} </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar.js';\nimport Home from './components/Home.js';\nimport Contact from './components/Contact.js';\nimport Post from './components/Post.js';\nimport {Route, Switch} from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n         <Navbar />\n         <Switch>\n            <Route exact path = '/' component={Home} />\n            <Route exact path = '/contact' component={Contact} />\n            <Route exact path = '/posts/:post_id' component={Post} />\n          </Switch>\n        </div>\n        \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>)\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}